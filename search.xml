<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hash</title>
      <link href="/2022/08/29/hash/"/>
      <url>/2022/08/29/hash/</url>
      
        <content type="html"><![CDATA[<p><font size=4>Learning Hash from an easy leetcode problem</font></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1]</span><br></pre></td></tr></table></figure><h3 id="Solution-1-暴力枚举"><a href="#Solution-1-暴力枚举" class="headerlink" title="Solution 1:暴力枚举"></a>Solution 1:暴力枚举</h3><p>最容易想到的方法是枚举数组中的每一个数 <strong>x</strong>，寻找数组中是否存在 <strong>target - x</strong>。</p><p>当我们使用遍历整个数组的方式寻找 <strong>target - x</strong> 时，需要注意到每一个位于 <strong>x</strong> 之前的元素都已经和 <strong>x</strong> 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在  <strong>x</strong> 后面的元素中寻找 <strong>target - x</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int n = nums.size();</span><br><span class="line">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            for (int j = i + 1; j &lt; n; ++j) &#123;</span><br><span class="line">                if (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    return &#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Solution-2-哈希表"><a href="#Solution-2-哈希表" class="headerlink" title="Solution 2: 哈希表"></a>Solution 2: 哈希表</h3><p>注意到方法一的时间复杂度较高的原因是寻找 <strong>target - x</strong> 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p><p>使用哈希表，可以将寻找 <strong>target - x</strong> 的时间复杂度降低到从<strong>O(N)</strong> 降低到 **O(1)**。</p><p>这样我们创建一个哈希表，对于每一个 <strong>x</strong> ，我们首先查询哈希表中是否存在 <strong>target - x</strong> ，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        unordered_map&lt;int, int&gt; hash_table;</span><br><span class="line">        for (int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            auto it = hash_table.find(target - nums[i]);</span><br><span class="line">            if (it != hash_table.end()) &#123;</span><br><span class="line">                return &#123;it-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hash_table[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="C-STL-unordered-map-容器"><a href="#C-STL-unordered-map-容器" class="headerlink" title="C++ STL unordered_map 容器"></a>C++ STL unordered_map 容器</h3><ul><li>unordered_map是一个将key和value关联起来的容器，它可以高效的根据单个key值查找对应的value。</li><li>key值应该是唯一的，key和value的数据类型可以不相同。</li><li>unordered_map存储元素时是没有顺序的，只是根据key的哈希值，将元素存在指定位置，所以根据key查找单个value时非常高效，平均可以在常数时间内完成。</li><li>unordered_map查询单个key的时候效率比map高，但是要查询某一范围内的key值时比map效率低。</li><li>可以使用[]操作符来访问key值对应的value值。</li></ul><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>unordered_map的迭代器是一个指针，指向这个元素，通过迭代器来取得它的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;Key,T&gt;::iterator it;</span><br><span class="line">(*it).first;             // the key value (of type Key)</span><br><span class="line">(*it).second;            // the mapped value (of type T)</span><br><span class="line">(*it);                   // the &quot;element value&quot; (of type pair&lt;const Key,T&gt;) </span><br></pre></td></tr></table></figure><p>它的键值分别是迭代器的first和second属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">it-&gt;first;               // same as (*it).first   (the key value)</span><br><span class="line">it-&gt;second;              // same as (*it).second  (the mapped value) </span><br></pre></td></tr></table></figure><h4 id="常见成员函数"><a href="#常见成员函数" class="headerlink" title="常见成员函数"></a>常见成员函数</h4><h5 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h5><ul><li>begin 　　返回指向容器起始位置的迭代器（iterator）</li><li>end 　　 返回指向容器末尾位置的迭代器</li></ul><h5 id="Capacity"><a href="#Capacity" class="headerlink" title="Capacity"></a>Capacity</h5><ul><li>size 　　   返回有效元素个数</li><li>max_size    返回 unordered_map 支持的最大元素个数</li><li>empty       判断是否为空</li></ul><h5 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h5><ul><li>operator[] 　访问元素</li><li>at 　　 　　　访问元素</li></ul><h5 id="元素修改"><a href="#元素修改" class="headerlink" title="元素修改"></a>元素修改</h5><ul><li>insert 　　插入元素</li><li>erase　　 删除元素</li><li>swap 　　 交换内容</li><li>clear　　 清空内容</li><li>emplace 　构造及插入一个元素</li></ul><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><ul><li>find 　　　　　通过给定主键查找元素,没找到：返回unordered_map::end</li><li>count 　　　　 返回匹配给定主键的元素的个数</li><li>equal_range 　返回值匹配给定搜索值的元素组成的范围</li></ul><font size=3>If you want to know more about hash,you can visit [数据结构 Hash表（哈希表）_洌冰的博客-CSDN博客_哈希表](https://blog.csdn.net/u011109881/article/details/80379505)  .</font>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/28/hello-world/"/>
      <url>/2022/08/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
